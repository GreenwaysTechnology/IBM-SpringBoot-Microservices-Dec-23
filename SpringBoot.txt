			    Spring Boot
.....................................................................................

What is Spring Boot?
What is difference Between Spring boot and Spring framework(old spring)-Spring core?
How to build distributed java applications using spring
 -Microservices.

.....................................................................................
			   Spring Framework && Spring Boot
.....................................................................................

What is Spring Framework?

  Spring is Java Framework to build enterprise distributed application.

Types of application?

=>Desktop application
=>Network based application
   Apps runs in the remote machine and accessed that apps via network.
 =>Client Server Arch
	Application has three major layer(tier)
    ->Data Layer -Where we store data
    ->Biz layer - Where we process data
    ->Presentation Layer - Where we present  data


 ->Mainframe based arch
 ->Layered Client server arch without mainframeworks
    ->Single/One tier client server - >Both storage and biz processing kept in single 				      machine,where as ui layer is kept separately.

   ->Two/tier client server
        Database/Storage layer is separated, biz processing layer is kept in one 	machine, and ui also kept in the same machine.

   ->Three tier client server 
	Data layer , Biz processing layer, Ui layer is kept in different machines

   ->N-tier client server 
      Data Layer
      Biz processing layer
	->MOM Layer - Message oriented middlware -
        ->Rpc layer - Remote Procedure call-app to app interaction.
        ->Integration layer - ESB (Enterprise Server Bus)
    Each layer can be kept in different and different machines , each layer can communicate over network using its own networking protocals

What is Distributed Application?
    Distributed application is other wise called "N-tier client server arch"
 Software components runs in different and different machines and talks over networking using "its own protocal"..

How to build distributed apps?
   You can build distributed applications in any technology like "java",".netnet",php,python,node.js,.....


Distributed application types:
..............................
Now a days distributed apps are built using various patterns.

1.Monolithic Architecture pattern
    Legacy way of building "distributed apps"
2.Microservice Architecture pattern
    Modern way of building "distributed apps"


		 Since Spring is Distribtued java App framework
		  We can build "Mononlolithic" and also we can 
		    build "Microservices" based apps.


As a java developer, I need to know what are the concepts available to start 
building Monololithic apps in Spring.

1.Spring core Framework & Boot
2.Spring Data 
3.Api Development using webservices - Rest / Soap
4.Integration /MOM using Rabbitmq or Kafka....

As a java developer, I need to know what are the concepts available to start 
building Microservices apps in Spring.


1.Spring core Framework & Boot
2.Spring Data 
3.Api Development using webservices - Rest / Soap
4.Integration /MOM using Rabbitmq or Kafka....
5."Spring Cloud"- framework which provides all infrastructure
  to build Microservices based distributed apps.

....................................................................................
			 History Of Spring Framework
....................................................................................

Early 2000,Java become very popular for building distributed Applications.

Java Technology Types:

1.JSE 
   -Core java programming language
2.JEE
  -Building distributed apps 
3.JME
  -Device apps like mobile

JCP - Java Community Process
 Who standarize the entire Java Technology.

Java works based on Specification,
   Rules and regualations how things are working.

JSE - How java programming language works
JVM - How Java vm can be implementated.

....................................................................................
                             JEE -Enterprise Specification
.....................................................................................

JEE Platform spec : containers /app containers/tools

1.WebTechnology spec
 Java servlet
 JSP
 JSF
 Websocket
 JSTL
 EL
2.Enterprise Application spec
EJB
JPA -ORM
JMS
JTA
DI
Context and DI
Concurrency Util

3.Web Services

SOAP based  -JAX-WS
REST Based  -JAX-RS

4.Management and Security technologies
........................................
Java EE Security spec
Java Auth
Java authorzation
JAVA EE additional spec
JMX -Jmeter

....................................................................................
				  
 		Complixty of JEE Spec and implementation
.....................................................................................

JEE enterprise/distributed application:
......................................

Client Layer         Web Layer      Biz layer      Data Layer/Persistency

Browser             Servlet/JSP      EJB               Entity Beans

EJB :Enterprise Java Bean
  Java Object can support distributed biz operations
eg: incase of shopping cart
  I have a bean(java object) which has three apis addToCart,Checkout,Payment)

Api classifications:
1.Session Bean  - to represent biz logic---jdbc--dml
2.Enitity bean  -ORM - Object to Table mapping-First orm solution---Hibernate
3.Message Driven Bean - Message driven systems-RabbitMQ,JMS


Rod johnson  was working in enterprise banking application with jee, he faced lot of 
complexity in designing ejb driven systems, so he decided to move out ejb from JEE application, he wrote book called expert  J2EE ONE ON ONE design and development.

He proposed a model  that model later on came as The project in "Spring Season" - Spring Framework.

Client Layer         Web Layer      Biz layer                Data Layer/Persistency

Browser             Spring MVC     Spring Services          Spring-orm - Spring-								    data

Spring development objective is "POJO". (Plain Old Java Object)

When you build enterprise java apps, no plumbing(bolier plate code),Spring framework takes care that plumbing.


Java is Object Oriented Programming language.

Apps built on java collection of objects.

Object Oriented Principles:
...........................

1.Abstraction
2.Encapsulation
3.Hierarchy
4.Typing
5.Modularity
----------------------
6.Concurrency
7.Persistency

1.Object Management :Hierarchy

Object Relationship

-HAS-A -  Composition
-IS-A - Inheritance.

Enterprise application challanges:

1.Object Management

IOC : Inversion of Control
 Inversion -Do opposit
 of Control -Management

In enterprise application object creation and linking objects are so complex that should be removed from the developer.

Someone should take care object creation and linking= 
  =>This process is called as IOC.
The IOC suggest the automation program,that program called as IOC Container.


class Order {
   Product product
}

class Customer{
   Order order
}

class Product {
  Item item
}
class Item {

}

Customer information
 ->Order
     -Product
        -Item

You have to create Object for every class
You have to pass object reference to every Object - HAS-A

new Customer(new Order(new Item()))

IOC:

 Invert- Do opposit 
 ofControl -Management

 Do opposit Management 

Management - creating object and mainitain its relationship references
		-developer via code

Do Opposit - Dont create object , dont management object life cycle
   IOC
Some body has to create objects and manage its relationship - "Automated Program"
   -IOC Container

ioc container implementation:
 -Spring framework provides at core ioc container - Spring Context
....................................................................................
.....................................................................................
			Spring Application
.....................................................................................
   The application is written in java technology, executed on Spring Container which is runtime for spring applications.spring container runs on jvm


			  Spring Application
				 |
			   Spring Container
				 |
				JVM


What is framework?
   One Stop Solution
 Collection of tools and technologies provided in one place to build end to end applications mostly.
  
  
What spring framework offers?

 Spring offers collection of many projects.


1.Core:

IoC container,
Events, 
Resources, 
i18n,
Validation,
Data Binding,
Type Conversion, 
SpEL,
AOP.

2.Spring MVC
3.Spring cloud
etc....
https://spring.io/projects/

....................................................................................
				Spring Core principle
.....................................................................................

Make Java enterprise distributed application easy way.

=>IOC and Dependency Injection
     -How to create objects and how to link objects.

Spring Provides

1.Application code
   classes which expose biz logic and apis - written by developer

2.Infrastructure code - provided by framework
  creating objects
  initalization dependencies

Spring takes care of infra code, where developer takes care of app code.

Object Creation In spring:
.........................
 In Spring Object creation and linking objects must be separated from the developer
 	-IOC and DI

For implementing IOC and DI, spring offers three technique

Spring is based on Configurtion:

Three types of configuration:

1.XML driven - old way of configuration
2.Java Config Driven - after xml
3.Boot Driven - highly automated configuration system.


.....................................................................................
				   Tools For Spring Application Development
....................................................................................
1.JDK  11 | 17
   HotSpot or OpenJDk
2.Build Tools
   Maven,Gradle
3.Docker

Spring Versions and features

2004 - Spring Framework 1.0 released
– Champions dependency injection
– Encourages POJOs
– Uses XML files to describe application
  configuration
– Becomes popular quickly as an EJB
  alternative

• Spring 2.0 (2006):
 – XML simplification, async JMS, JPA, AspectJ support

• Spring 2.5 (2007, last release 2.5.6)
  – Requires Java 1.4+ and supports JUnit 4
  – Annotation DI, @MVC controllers, XML namespaces

• Spring 3.x (3.2.17 released July 2013)

   – Environment & Profiles, @Cacheable, @EnableXXX …
   – Requires Java 1.5+ and JUnit 4.7+
   – REST support, JavaConfig, SpEL, more annotations

• Spring 4.x (released Dec 2016)
    – Support for Java 8, @Conditional, Web-sockets

• Spring 5.x (2017) - Spring Boot
  MicroService driven Dev features
   – Reactive programming focus
   - Functional Programming
   - Cloud Functionality
   - Container support

• Spring 6.x (2023)
   -Java 11 and 17 LTS support
   -Only improvments and bug fixing

Spring Boot:
  Spring was available inside Spring Framework 5.x 
  later it became independant project
  Now days only Spring boot is defacto standard for configuring spring applications
  
  Spring boot 3.1 is new Spring Boot Release
.....................................................................................
....................................................................................
				Spring Core Concepts
....................................................................................

Spring Core Concepts:

1.Spring Bean

What is Bean?
   
  Bean is terminallogy coined by SUN Micro System to name java object.

Object vs Bean?

 -Same but Bean has some special characteristics  which was proposed by SUN micro system via "Java Bean Spec"

It is java class, based Java Bean standards
 	-class should be public
 	-properties should be private
 	-set and get methods - Accessors and mutators
	-constructors

Why Bean Spec?
  - in order to standarize the java dev process- Coding Standards.

public class Customer {
  private  int id;
  private String name;
}
    "Spring  follows java bean spec in order to create object and links objects"

class CustomerService {

   private CustomerRespository rep;

   CustomerService(){

   }
   set /get

}
class CustomerRespository{


}

Spring Bean is Java Object follows Bean Specification and also managed by Spring Container.

.....................................................................................			  	 Spring Bean Creation(Object)
.....................................................................................


Who creates Spring Beans?

 -Spring Container

 Spring container is java object, which manages object(bean) life cycle like   create,use,destroy.

How spring beans are created?

-> you must have bean definitions outside application biz logic
-> sp container reads that bean definitions, initalizes the beans.

Architecture:

			POJO Classes(Bean)
				 |
    Spring-Application <====>SpringContainer
      config file		 |
		       Fullyconfigured System


Spring Bean Definitions(file) instructs Spring Container how to create objects(order of creations) and how to link (DI) objects

....................................................................................
			Spring Application Configuration Management
.....................................................................................

Spring Application can be configured in many ways

1.XML files  -  Old and Legacy.

2.Java Config + Annotations -Modern way

2.1 Java Config -Manual - Write Configuration and logic

 Here Dev need to write Configuration and biz logic , which makes app dev slower.

Just Focus logic, automate configuration itself - AutoConfig

3.AutoConfig:
    Framework must take care of configuration based on various conditions like
 i want web and jpa , messaging.
                        "Birth of Spring Boot"


....................................................................................
				Spring Project Setup 
	    

What are the required components to setup Spring Project.

1.IDE,mvn,java

2.Project layout

Spring Project requires

Infra Structure:
 1.Project libraries

 2.Project Configurations

Application Structure

1.Application code
2.assets - imgs,docs
3.App Configuration

mvn or gradle

.............................................................................................
				    Spring Project Creations
............................................................................................

Whether you build app using Boot or Old Spring Framework Two things you have to take care

1.Project Dependency -  Libraries- core,web,data,cloud,logger....
  You have to manage
  Spring have to manage - Boot via starters

2.Application Configuration
   -Bean defintions -  xml, or javaconfig- manual/auto(spring boot)
   

Spring Project Using Spring Framework method:
.............................................

XML based project:
....................

Steps:

1.create Plain Maven Project and spring dependency.

pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>ibm.spring</groupId>
    <artifactId>springApp</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>6.0.11</version>
        </dependency>
    </dependencies>
</project>

Without Spring how to create objects?

Customer.java
package com.ibm.spring.beans;

public class Customer {
    private int id;
    private String name;

    public Customer() {
    }

    public Customer(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

Main.java
package com.ibm.spring;

import com.ibm.spring.beans.Customer;

public class ObjectCreationWithoutSpring {
    public static void main(String[] args) {
        //object creation using new operation
        Customer customer = new Customer();
        //setting data via setters
        customer.setId(1);
        customer.setName("Subramanian");

        //read data
        System.out.println(customer.getId() + " " + customer.getName());

        //setting data via constructor
        customer = new Customer(1,"Ram");

        //read data
        System.out.println(customer.getId() + " " + customer.getName());

    }
}
...................................................................................

Object creation with Spring: - IOC
...................................

In order to create object by spring, we need a configuration system.

1.XML based configuration- very very old-nobody is using today, but which is foundation for modern spring configuration(auto-spring boot)

2.java config - new way of configuration used today- auto config.


XML based configuration:
1.config xml

place beans.xml in the class path - resources/beans.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- bean definitions here -->

</beans>


3.Configure the Bean in beans.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- bean definitions here -->
    <bean id="customer" class="com.ibm.spring.beans.Customer">
        <!--data setting via setters -->
        <property name="id"  value="100"/>
        <property name="name" value="Subramanian"/>
    </bean>
</beans>

Java:
package com.ibm.spring;

import com.ibm.spring.beans.Customer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class ObjectCreationUsingSpring {
    public static void main(String[] args) {
        //Load Spring Container:XMLContainer,JavaConfigContainer,BootContainer
        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        System.out.println("Container is ready");
        //Get the bean from the container.
        Customer customer = context.getBean(Customer.class);
        //read data
        System.out.println(customer.getId() + " " + customer.getName());

    }
}
.....................................................................................
Setting values via constructors

beans.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- bean definitions here -->
<!--    <bean id="customer" class="com.ibm.spring.beans.Customer">-->
<!--        &lt;!&ndash;data setting via setters &ndash;&gt;-->
<!--        <property name="id"  value="100"/>-->
<!--        <property name="name" value="Subramanian"/>-->
<!--    </bean>-->
    <bean id="customer" class="com.ibm.spring.beans.Customer">
         <constructor-arg name="id" value="100"/>
         <constructor-arg name="name" value="Subramanian"/>
    </bean>
</beans>

package com.ibm.spring;

import com.ibm.spring.beans.Customer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class ObjectCreationUsingSpring {
    public static void main(String[] args) {
        //Load Spring Container:XMLContainer,JavaConfigContainer,BootContainer
        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        System.out.println("Container is ready");
        //Get the bean from the container.
        Customer customer = context.getBean(Customer.class);
        //read data
        System.out.println(customer.getId() + " " + customer.getName());

    }
}
.....................................................................................				 Dependency Injection
.....................................................................................

What is dependency Injection?

  Linking objects
  Setting Object Property values

  Setting Object references with Object who refers it.

Dependency Injection on reference types and Primitives.

eg:
  OrderService needs OrderRepository


Types of DI:

1.Setter
    Linking objects after objects created
2.Constructor
    Linking objects, During object creation.

When to use Setter vs Constructor?

Note: 
 Constructor properties are initlized during object creations
 Settter properties are initlized after object creations

Spring supports both.You can mix and match.

Constructors:
  ->Enforce mandatory dependencies

Setters:
 1.Allow optional dependenices


Setter and constructor injections can be done with primtive data types and reference types:

Reference Type eg:
..................

Customer has address.

beans.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- bean definitions here -->
    <!--    <bean id="customer" class="com.ibm.spring.beans.Customer">-->
    <!--        &lt;!&ndash;data setting via setters &ndash;&gt;-->
    <!--        <property name="id"  value="100"/>-->
    <!--        <property name="name" value="Subramanian"/>-->
    <!--    </bean>-->
    <!--    <bean id="customer" class="com.ibm.spring.beans.Customer">-->
    <!--         <constructor-arg name="id" value="100"/>-->
    <!--         <constructor-arg name="name" value="Subramanian"/>-->
    <!--    </bean>-->
    <!--    Dependency injection-->
    <!--    <bean id="customer" class="com.ibm.spring.beans.Customer">-->
    <!--        &lt;!&ndash;        Primitive dependency&ndash;&gt;-->
    <!--        <property name="id" value="100"/>-->
    <!--        <property name="name" value="Subramanian"/>-->
    <!--        &lt;!&ndash;        Reference Dependency&ndash;&gt;-->
    <!--        <property name="address" ref="address"/>-->

    <!--    </bean>-->
    <bean id="customer" class="com.ibm.spring.beans.Customer">
        <constructor-arg name="id" value="100"/>
        <constructor-arg name="name" value="Subramanian"/>
        <constructor-arg name="address" ref="address"/>
    </bean>
    <bean id="address" class="com.ibm.spring.beans.Address">
        <property name="city" value="Coimbatore"/>
        <property name="state" value="Tamil nadu"/>
        <property name="zipcode" value="611111"/>
    </bean>
</beans>

package com.ibm.spring;

import com.ibm.spring.beans.Customer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;


public class DependencyInjection {
    public static void main(String[] args) {
        //Load Spring Container:XMLContainer,JavaConfigContainer,BootContainer
        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        System.out.println("Container is ready");
        //Get the bean from the container.
        Customer customer = context.getBean(Customer.class);
        //read data
        System.out.println(customer);

    }
}

package com.ibm.spring.beans;

public class Customer {
    private int id;
    private String name;

    //dependency
    private Address address;

    @Override
    public String toString() {
        return "Customer{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", address=" + address +
                '}';
    }

    public Customer() {
    }

    public Address getAddress() {
        return address;
    }

    public void setAddress(Address address) {
        this.address = address;
    }

    public Customer(int id, String name, Address address) {
        this.id = id;
        this.name = name;
        this.address = address;
    }

    public Customer(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}
package com.ibm.spring.beans;

public class Address {
    private String city;
    private String state;
    private String zipcode;

    public Address() {
    }

    public Address(String city, String state, String zipcode) {
        this.city = city;
        this.state = state;
        this.zipcode = zipcode;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public String getZipcode() {
        return zipcode;
    }

    public void setZipcode(String zipcode) {
        this.zipcode = zipcode;
    }

    @Override
    public String toString() {
        return "Address{" +
                "city='" + city + '\'' +
                ", state='" + state + '\'' +
                ", zipcode='" + zipcode + '\'' +
                '}';
    }
}

.....................................................................................
				Dependency Injection values

1.You can inject primitives values- int,float,string,char,boolean
2.You can inject objects -Customer ,Address
3.You can inject list - Collections,Map,List,Set
.....................................................................................			 Program to Super Type - Interface Driven DI
.....................................................................................

package com.ibm.spring.beans.interfaces;

public interface CustomerRepository {
    String findAll();
}
package com.ibm.spring.beans.interfaces;

public class CustomerInMemoryRepositoryImpl implements CustomerRepository {
    @Override
    public String findAll() {
        return "CustomerInMemoryRepositoryImpl";
    }
}
package com.ibm.spring.beans.interfaces;


public class CustomerJPARepositoryImpl implements CustomerRepository {
    @Override
    public String findAll() {
        return "CustomerJPARepositoryImpl";
    }
}

package com.ibm.spring.beans.interfaces;

public class CustomerService {
    private CustomerRepository customerRepository;

    public CustomerService() {
    }

    public CustomerService(CustomerRepository customerRepository) {
        this.customerRepository = customerRepository;
    }

    public CustomerRepository getCustomerRepository() {
        return customerRepository;
    }

    public void setCustomerRepository(CustomerRepository customerRepository) {
        this.customerRepository = customerRepository;
    }
}

beans.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="inmemory" class="com.ibm.spring.beans.interfaces.CustomerInMemoryRepositoryImpl"/>
    <bean id="jparepo" class="com.ibm.spring.beans.interfaces.CustomerJPARepositoryImpl"/>
    <bean id="customerService" class="com.ibm.spring.beans.interfaces.CustomerService">
        <constructor-arg name="customerRepository" ref="inmemory"/>
    </bean>

</beans>
Main:
package com.ibm.spring;

import com.ibm.spring.beans.Customer;
import com.ibm.spring.beans.interfaces.CustomerService;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;


public class InterfaceInjection {
    public static void main(String[] args) {
        //Load Spring Container:XMLContainer,JavaConfigContainer,BootContainer
        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        System.out.println("Container is ready");
        //Get the bean from the container.
        CustomerService customer = context.getBean(CustomerService.class);
        //read data
        System.out.println(customer.getCustomerRepository().findAll());

    }
}
....................................................................................
.....................................................................................
Bean Definitions:
1.How to create bean 
   class,factory-method

2.How to name beans?
   id,name,alias

3.scope of the beans? : visibility of the bean
   singleton,prototype,
   request,session,application,websocket

4.Dependence Injections
   constructor
   setter
   autowire

5.Lazy initialization mode
 controlling bean creations
  eagar-default
  lazy-ondemand
  lazy-init="true"

5.How to simplify bean injections? 
   Autowiring mode 
 no,byName,byType,constructor  

.....................................................................................
.............................................................................................
					Bean Creation
............................................................................................

1.Via class  
   Spring creates using new Operator
  new Order()

2.Via Factory Pattern

-if constructor marked private
   via factory factory api.


<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="authService" class="com.ibm.spring.beans.AuthService" factory-method="getInstance"/>
</beans>


package com.ibm.spring.beans;

public class AuthService {
    private String userName = "admin";
    private String password = "admin";

    private AuthService() {

    }

    //Factory method through which you can create object
    public static AuthService getInstance() {
        System.out.println("Factory");
        return new AuthService();
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}
package com.ibm.spring;

import com.ibm.spring.beans.AuthService;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class FactoryBean {
    public static void main(String[] args) {
        //Load Spring Container:XMLContainer,JavaConfigContainer,BootContainer
        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        System.out.println("Container is ready");
        //Get the bean from the container.
        AuthService authService = context.getBean(AuthService.class);
        //read data
        System.out.println(authService.getUserName());
//        AuthService authService = new AuthService();

    }
}
...........................................................................
			Bean Scopes
.....................................................................................
Generally, you can create multiple instance from bean definition.
  some times if you want to control that bean creation
you can use bean creation scope.

Spring supports 6 scopes:
 singleton,prototype,
   request,session,application,websocket


1.singleton
 (Default) Scopes a single bean definition to a single object instance for each Spring IoC container.
 if you call getBean no of time, spring returns the only one instance at any point of time.
This is default scope.

package com.ibm.spring;

import com.ibm.spring.beans.Hello;
import com.ibm.spring.beans.interfaces.CustomerService;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class BeanScope {
    public static void main(String[] args) {
        //Load Spring Container:XMLContainer,JavaConfigContainer,BootContainer
        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        System.out.println("Container is ready");
        //Get the bean from the container.
        Hello helloOne = context.getBean(Hello.class);
        Hello helloTwo = context.getBean(Hello.class);
        Hello helloThree = context.getBean(Hello.class);
        Hello helloFour = context.getBean(Hello.class);

    }
}
beans.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="Hello" class="com.ibm.spring.beans.Hello"/>
</beans>

2.prototype:
a new bean instance is created every time a request for that specific bean is made 
that is, the bean is injected into another bean or you request it through a getBean() method call on the container.

beans.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--    Single Ton-->
    <!--    <bean id="Hello" class="com.ibm.spring.beans.Hello"/>-->

    <!--    Prototype-->
    <bean id="Hello" class="com.ibm.spring.beans.Hello" scope="prototype"/>

</beans>

package com.ibm.spring;

import com.ibm.spring.beans.Hello;
import com.ibm.spring.beans.interfaces.CustomerService;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class BeanScope {
    public static void main(String[] args) {
        //Load Spring Container:XMLContainer,JavaConfigContainer,BootContainer
        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        System.out.println("Container is ready");
        //Get the bean from the container.
        Hello helloOne = context.getBean(Hello.class);
        Hello helloTwo = context.getBean(Hello.class);
        Hello helloThree = context.getBean(Hello.class);
        Hello helloFour = context.getBean(Hello.class);

        System.out.println(helloOne.hashCode());
        System.out.println(helloTwo.hashCode());
        System.out.println(helloThree.hashCode());
        System.out.println(helloFour.hashCode());

    }
}
.....................................................................................
				DI automations
.....................................................................................
autowire:

Dependency Injections:
 ->property - setter injections
 ->constructor-arg ref ->constructor injections

 
->autowire 
Which is not new injection type, but it simplifies property and constructor injections

     no ->Explicit via property or constructor-arg
     byName - Implicit via property
     byType - Implicit via type + property
     constructor - Implicit via constructor

autowire="no | byName | byType | constructor"

Lab:

Customer
    |
    Address ---->via autowire

beans.xml - without autowire
<bean id="customer" class="com.ibm.spring.beans.Customer">
        <constructor-arg name="id" value="100"/>
        <constructor-arg name="name" value="Subramanian"/>
        <constructor-arg name="address" ref="address"/>
    </bean>
    <bean id="address" class="com.ibm.spring.beans.Address">
        <property name="city" value="Coimbatore"/>
        <property name="state" value="Tamil nadu"/>
        <property name="zipcode" value="611111"/>
    </bean>

beans.xml wit autowire 
    <bean id="customer" class="com.ibm.spring.beans.Customer" autowire="byType">
        <constructor-arg name="id" value="100"/>
        <constructor-arg name="name" value="Subramanian"/>
<!--        <constructor-arg name="address" ref="address"/>-->
    </bean>
    <bean id="address" class="com.ibm.spring.beans.Address">
        <property name="city" value="Coimbatore"/>
        <property name="state" value="Tamil nadu"/>
        <property name="zipcode" value="611111"/>
    </bean>
.....................................................................................
Bean life cycles:
.................

init
destroy

Points:
1.if you want to initalize the resources,
 Resources:
   Resource is nothing but ,something outside jvm
    ex: FileSystem,Databases,Network sockets,Graphics context....
  Resources must be mananaged properly , if not , it will give you
 memory leaks.

In general , resources are initialized inside Class constructors
eg:Establishing database,socket connections, create file points,open file

According to spring best practices, dont do it inside constructor
 Why
   WHich hindrences the bean intialization, which will drop app startup performance.

then where can i initlaize
 spring provides life cycle hooks

   ->init-method="initmethod"
   ->destroy-method="destroymethod" - Resouce clean up

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="databaseConnection" class="com.ibm.spring.beans.DatabaseConnection" init-method="init"
          destroy-method="destroy"/>

</beans>
package com.ibm.spring;

import com.ibm.spring.beans.Customer;
import com.ibm.spring.beans.DatabaseConnection;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class LifeCyles {
    public static void main(String[] args) {
        //Load Spring Container:XMLContainer,JavaConfigContainer,BootContainer
//        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        ConfigurableApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        System.out.println("Container is ready");
        //Get the bean from the container.
        DatabaseConnection databaseConnection = context.getBean(DatabaseConnection.class);

        context.registerShutdownHook();

    }
}
How to call destroy hook method on bean?

BeanFactory
 |
org.springframework.context.ApplicationContext
 |
->org.springframework.context.ConfigurableApplicationContext
   |
  registerShutdownHook();------->destroy method

.....................................................................................
			 Container Extensions Points
.....................................................................................

Typically, an application developer does not need to subclass  ApplicationContext implementation classes.

 Instead, the Spring IoC container can be extended by plugging in implementations of special integration interfaces. 

Spring core System:

		  Spring Application
			|	
 	    Configuration Management System
		 (tools-XML,Annotations)
		-------------------------
		|			|
		| Spring IOC Container  |
		------------------------
			|
		       JVM


 How to add extensions(plugins) on to the Existing Spring Container?


 		 Spring Application
			|	
 	    Configuration Management System
		 (tools-XML,Annotations)
		-------------------------
		|			|--->Extensions
					|    1.BeanPostProcessor 
		|			|     etc...
		|			|
		| 			|
		| Spring IOC Container  |
		|			|
		|			|	
		|			|
		|		        |
		------------------------
			|
		       JVM

Features
1.How to instrument beans
2.How to instrument containers


BeanPostProcessor: Extensions
..................
  BeanPostProcessor are classes that tells Spring what should be done after beans are created.

package com.ibm.spring.beans;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanPostProcessor;

public class BeanPostProcessorExtension implements BeanPostProcessor {
    //This method will be called after bean creation
    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
        System.out.println("postProcessAfterInitialization : " + bean + " " + beanName);
        return bean;
    }

    //this method will be called before before bean creation.
    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
        System.out.println("postProcessBeforeInitialization : " + bean + " " + beanName);
        return bean;
    }
}

package com.ibm.spring;

import com.ibm.spring.beans.BeanPostProcessorExtension;
import com.ibm.spring.beans.Customer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class BeanPostProcessor {
    public static void main(String[] args) {
        //Load Spring Container:XMLContainer,JavaConfigContainer,BootContainer
        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        System.out.println("Container is ready");


    }
}
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="hello" class="com.ibm.spring.beans.Hello"/>
    <bean class="com.ibm.spring.beans.BeanPostProcessorExtension"/>


</beans>
2.BeanFactoryPostProcessor : Container Extension, where we instrument container itself.

<bean class="com.ibm.spring.app.extensions.FactoryBeanPostProcessorExtension"/>
package com.ibm.spring.app.extensions;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;

public class FactoryBeanPostProcessorExtension implements BeanFactoryPostProcessor {

    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {

        System.out.println("Container Extensions : " + beanFactory);

    }

}
.....................................................................................

	  More Container Features(extensions)

             Spring Application
			|	
 	    Configuration Management System
		 (tools-XML,Annotations)
		-------------------------
		|			|--->Extensions
					|    1.BeanPostProcessor 
		|			|    2.Features2
		|			|    3.Feature3
		| 			|    4.FeatureN
		| Spring IOC Container  |
		|			|
		|			|	
		|			|
		|		        |
		------------------------
			|
		       JVM


	Spring provides lot of built in Extensions
PropertyPlaceholderConfigurer :
   It is used to externalize the bean property values
eg:

Bean defintion file
<bean id="customer" class="com.ae.spring.entity.Customer"
  <property name="customerId" value="100">
</bean>

With PropertyPlaceHolder = ${propertykey} => propValue
eg: 
<bean id="customer" class="com.ae.spring.entity.Customer"
  <property name="customerId" value="${customer.id}">
</bean>

PropertyPlaceholderConfigurer 

classpath:customer-info.properties
customer.id=1
customer.name=Ram

eg:
Steps:
1.property file
src/main/java/customer-info.properties
customer.id=1
customer.name=Ram
2.Activate Extension to read Property file
  ->
<beanclass="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="classpath:customer-info.properties" />
</bean>

3.Read Property value:
		ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
		Customer customer = context.getBean("customer", Customer.class);
		System.out.println(customer.getId() + " " + customer.getName());
....................................................................................
			....................................................................................
	  How to introduce Annotations -Annotation Driven configuration
.....................................................................................
Annotations:
 Meta Information about class,methods,fields.

Why Annotation?
 Annotations help to inject "boiler plate code" -The code which is not neccessary for the dev but necessary for compiler,build tools,document generation tools,runtime.

Spring Introduced Annoations to simplify the lot of code generations.

Types of Spring Annotations

1.Spring Properity annotations
2.JSR 250 Annotations 


How to introduce Annotations inside Spring?
 
 Via ContainerExtension Mechanism

Common Annotations:
1.RequiredAnnotationBeanPostProcessor - @Required
2.AutowiredAnnotationBeanPostProcessor  -@Autowrited
3.CommonAnnotationBeanPostProcessor  -@Common
4.PersistenceAnnotationBeanPostProcessor -@Entity
etc....

Steps to integrate Annotations:

1.Activate The Annoation via ContainerExtension Point Beans

beans.xml

 <bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor"/>
 -@Required

 -@Autowried
<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>


What if any one of the AnnotationBeanPostProcessor has its own dependency, we need to inject
That as well, other wise it will throw error.

what if i want to use more annotations, i need to add more AnnotationBeanPostProcessor beans in bean.xml
  This is very complex

Note: modern spring has implicitly added annoation post bean processors , so you dont need to add "Core Annotation BeanPostProcessor in beans.xml".

.....................................................................................
			Automation - Annoation Scanner
.....................................................................................

Spring added feature called automated scanner, which scans all annoations from the build path/class path, creates all the beans related to annotationBeanPostoer

How to tell spring container to scan annotations?

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <!--    Tell to spring to scan all annation : you dont need to annotation post processors-->
    <context:annotation-config/>

</beans>

Autowire annotation:
....................
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <!--    Tell to spring to scan all annation : you dont need to annotation post processors-->
    <context:annotation-config/>
    <bean id="customer" class="com.ibm.spring.beans.Customer">
        <constructor-arg name="id" value="100"/>
        <constructor-arg name="name" value="Subramanian"/>
    </bean>
    <bean id="address" class="com.ibm.spring.beans.Address">
        <property name="city" value="Coimbatore"/>
        <property name="state" value="Tamil nadu"/>
        <property name="zipcode" value="611111"/>
    </bean>
</beans>
package com.ibm.spring.beans;

import org.springframework.beans.factory.annotation.Autowired;

public class Customer {
    private int id;
    private String name;

    //dependency
    @Autowired
    private Address address;

    @Override
    public String toString() {
        return "Customer{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", address=" + address +
                '}';
    }

    public Customer() {
    }

    public Address getAddress() {
        return address;
    }

    public void setAddress(Address address) {
        this.address = address;
    }

    public Customer(int id, String name, Address address) {
        this.id = id;
        this.name = name;
        this.address = address;
    }

    public Customer(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }


    public void setName(String name) {
        this.name = name;
    }
}
package com.ibm.spring.beans;

public class Address {
    private String city;
    private String state;
    private String zipcode;

    public Address() {
    }

    public Address(String city, String state, String zipcode) {
        this.city = city;
        this.state = state;
        this.zipcode = zipcode;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public String getZipcode() {
        return zipcode;
    }

    public void setZipcode(String zipcode) {
        this.zipcode = zipcode;
    }

    @Override
    public String toString() {
        return "Address{" +
                "city='" + city + '\'' +
                ", state='" + state + '\'' +
                ", zipcode='" + zipcode + '\'' +
                '}';
    }
}
package com.ibm.spring;

import com.ibm.spring.beans.Customer;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;


public class DependencyInjection {
    public static void main(String[] args) {
        //Load Spring Container:XMLContainer,JavaConfigContainer,BootContainer
        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
        System.out.println("Container is ready");
        //Get the bean from the container.
        Customer customer = context.getBean(Customer.class);
        //read data
        System.out.println(customer);

    }
}
....................................................................................
				Bean Life Cycles and annoatations

in order to add life cycle annotations which is not part of spring core which is part of jsr 250. we need to add separate depedency.

in pom.xml
  <dependency>
            <groupId>javax.annotation</groupId>
            <artifactId>javax.annotation-api</artifactId>
            <version>1.3.2</version>
   </dependency>

eg:
package com.ibm.spring.app.annotations;

import org.springframework.beans.factory.annotation.Autowired;

import javax.annotation.PostConstruct;

public class Customer {
    private  int id;
    private String name;

    //life cycle methods
    @PostConstruct
    public void init(){
        System.out.println("Init");
    }

    @Override
    public String toString() {
        return "Customer{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", address=" + address +
                '}';
    }

    @Autowired
    private Address address;

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Address getAddress() {
        return address;
    }

    public void setAddress(Address address) {
        this.address = address;
    }
}

.....................................................................................
			How to reduce code slowly via annotations
.....................................................................................
Types of Annotations
.....................................................................................

1.JSR 250 annoations

@PostConstruct
@PreDestroy

2.Spring Annoations
@Required,@Autowired......etc...

You have beans.xml with annotation configuration, but still we have bean creation definitions how to remove those areas.

How to remove bean definitions from the beans.xml file

   <bean id="student" class="com.ibm.spring.app.annotations.Customer">
            <property name="id" value="1"/>
            <property name="name" value="Subramanian"/>
   </bean>

......................................................................................
					Types of Annotations
..............................................................................................

1.JSR 250 annoations

@PostConstruct
@PreDestroy


2.Spring Annoations

How to remove bean definitions from the beans.xml file

    <bean id="customer" class="com.ibm.spring.beans.Customer">
        <constructor-arg name="id" value="100"/>
        <constructor-arg name="name" value="Subramanian"/>
    </bean>
 <bean id="address" class="com.ibm.spring.beans.Address">
        <property name="city" value="Coimbatore"/>
        <property name="state" value="Tamil nadu"/>
        <property name="zipcode" value="611111"/>
    </bean>

Stereotype Annotations:

Stereotype: "Same type of things but it adds extra behaviour based on context"

@Component

What is Component?

The term coined by Microsoft in 1989.
In Object Oriented System Every thing is Object
The Term object is more general term.

Component is also Object(Bean) in spring context
  ->It is resulable
  ->follows all java bean standards

In java technology:
Bean
 In java Bean is called "java Object Only"

EJB
 It is also java object, which is distributed

Enitity
 It is also java object, which is persitable into fs,networks,rdbms

What is use of @Component?
 ->To eleminate bean definition from beans.xml file

<bean id="customerService"  class="com.ae.spring.service.impl.CustomerServiceImpl"/>


Api doc:

 @Target(value=TYPE)
 @Retention(value=RUNTIME)
 @Documented
 @Indexed
public @interface Component

@Component is class level annotation,declared on the top of class.

Indicates that an annotated class is a "component"
Such classes are considered as candidates for auto-detection when using annotation-based configuration and classpath scanning.


eg:
beans.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <!--    Tell to spring to scan all annation : you dont need to annotation post processors-->
    <context:annotation-config/>

    <bean id="orderService" class="com.ibm.spring.beans.OrderService"/>
</beans>


Auto-detection and component scanning:
base package: com.ae.spring
			    com
			     |
			    ae
			     |
                           spring
		    -----------------------------
		   |                            |
                service                        repo
		   |                            |
		 impl                          impl
-------------------------------       -----------------------------
  |               |                   |                          |
CustomerService ProductService     CustomerRepoImpl          ProductRepoImpl
Impl            Impl

@Component      @Component         @Component                @Component
.....................................................................................
.............................................................................................
			Automation - Stereotype Annoation Scanner
   ..............................................................................................
Types of SteroTypes:
1.Component
2.Service
3.Repository
4.Controller
5.RestController   


How to scan SteroTypes?

 <context:component-scan base-package="com.valtech.spring.beans.automation"/>

This package and its subpackages , scan and creates beans and make it ready.

@Component is a generic stereotype for any Spring-managed component.

@Repository, @Service, and @Controller are specializations of @Component for more specific use cases.

by annotating them with @Repository, @Service, or @Controller instead, your classes are more properly suited for processing by tools or associating with aspects.


beans.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <!--    Tell to spring to scan all annation : you dont need to annotation post processors-->
    <context:annotation-config/>
    <context:component-scan base-package="com.ibm.spring"/>
    <!--    -->

    <!--    <bean id="orderService" class="com.ibm.spring.beans.OrderService"/>-->
</beans>

OrderService
package com.ibm.spring.beans;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

@Component
public class OrderService {

    @Autowired
    private PaymentService paymentService;

    public OrderService() {
    }

    public OrderService(PaymentService paymentService) {
        this.paymentService = paymentService;
    }

    public PaymentService getPaymentService() {
        return paymentService;
    }

    public void setPaymentService(PaymentService paymentService) {
        this.paymentService = paymentService;
    }

    public String findAll() {
        return "orders" + this.paymentService.getPayment();
    }
}

PaymentService
package com.ibm.spring.beans;

import org.springframework.stereotype.Component;

@Component
public class PaymentService {
    public String getPayment() {
        return "Payment service";
    }

}
.....................................................................................				DOMAIN Driven Design
.....................................................................................
 
@Service:

@Target(value=TYPE)
 @Retention(value=RUNTIME)
 @Documented
 @Component
public @interface Service

Indicates that an annotated class is a "Service", originally defined by Domain-Driven Design (Evans, 2003) as "an operation offered as an interface that stands alone in the model, with no encapsulated state."


@Repository:
@Target(value=TYPE)
 @Retention(value=RUNTIME)
 @Documented
 @Component
public @interface Repository

indicates that an annotated class is a "Repository", originally defined by Domain-Driven Design (Evans, 2003) as "a mechanism for encapsulating storage, retrieval, and search behavior which emulates a collection of objects".

...........................................................................................

@Target(value=TYPE)
 @Retention(value=RUNTIME)
 @Documented
 @Component
public @interface Controller
Indicates that an annotated class is a "Controller" (e.g. a web controller).
.....................................................................................
				 End of Xml Configuration
.....................................................................................
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
    <!--scanner for common Annotation -->
    <context:annotation-config/>
    <!--    Scanner for StreoType Annotations-->
    <context:component-scan base-package="com.valtech.spring.beans.automation"/>
</beans>
....................................................................................
....................................................................................
..............................................................................................
		What if i want to remove this beans.xml itself
			    Java Config
.............................................................................................

Thanks to XML ,Good bye to XML,Welcome to Java Config:
......................................................

What is Java Config?

JavaConfig <=======> beans.xml
  but it is pure java Program.

Why Java config?
  Java Config was introduced to remove XML,

The XML is outside spring.
Spring need to parse xml file and construct objects accordingly
Which is heavy weight.
Spring introduced new configuration system which is written in java itself.
.....................................................................................

Java Configuration:

1.Bean declaration : @Component/@Service/@Repository/@Controller

package com.ibm.spring.beans;

import org.springframework.stereotype.Component;

@Component
public class HelloWorld {
    public String sayHello() {
        return "Hello";
    }
}

Configuration:
package com.ibm.spring.beans.config;

//This is class where we are going to create beans: java config
//AppConfig.java == beans.xml

import com.ibm.spring.beans.HelloWorld;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

//<beans>
@Configuration
public class AppConfig {
    //write logic to create bean

    //<bean/>
    @Bean
    public HelloWorld createHelloWorld() {
        return new HelloWorld();
    }
}
//</beans>

Main : Start Spring Container : AnnotationConfigApplicationContext(AppConfig.class)

package com.ibm.spring;

import com.ibm.spring.beans.HelloWorld;
import com.ibm.spring.beans.config.AppConfig;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class CreateBean {
    public static void main(String[] args) {
        ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
        System.out.println("Spring Container is ready");
        HelloWorld helloWorld = context.getBean(HelloWorld.class);
        System.out.println(helloWorld.sayHello());

    }
}
.....................................................................................
				How to simplify or modularize the bean creations
.....................................................................................

Modulariazation:
...............

Can we have multiple bean definition files- modular definition files

1.XML is so complex to maintain when app grows.
   -In general we can have multiple configurations
  like
	projectname-dao.xml
	cleartrip.dao.xml 
        cleartrip.service.xml
        cleartrip.entitis.xml
	cleartrip.beans.xml
via Program:
ConfigurableApplicationContext context = ClassPathXmlApplicationContext("bank-app.xml","account-repo.xml");

or
ConfigurableApplicationContext context = new ClassPathXmlApplicationContext
new String[] { "bank-app.xml", "account-repo.xml" });

How to break the configuration in annotations?

customer
 @Configuration
 class  CustomerConfig {
   ///customer beans
 }

order
@Configuration
 class  OrderConfig {
   ///customer beans
 }
accounts
@Configuration
 class  AccountsConfig {
   ///customer beans
 }

eg:
package com.ibm.spring.beans.config;

import com.ibm.spring.beans.HelloWorld;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class HelloConfig {

    @Bean
    public HelloWorld createHelloWorld() {
        return new HelloWorld();
    }
}
package com.ibm.spring.beans.config;

import com.ibm.spring.beans.CustomerService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class CustomerConfig {

    @Bean
    public CustomerService getCustomerService(){
         return new CustomerService();
    }
}

package com.ibm.spring.beans.config;

//This is class where we are going to create beans: java config
//AppConfig.java == beans.xml

import com.ibm.spring.beans.CustomerService;
import com.ibm.spring.beans.HelloWorld;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;

//<beans>
@Configuration
@Import({HelloConfig.class, CustomerConfig.class})
public class AppConfig {
    //write logic to create bean
    //<bean/>
}
//</beans>

package com.ibm.spring.beans;

import org.springframework.stereotype.Service;

@Service
public class CustomerService {

    public String findAll() {
        return "findAll";
    }
}
package com.ibm.spring;

import com.ibm.spring.beans.CustomerService;
import com.ibm.spring.beans.HelloWorld;
import com.ibm.spring.beans.config.AppConfig;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class CreateBean {
    public static void main(String[] args) {
        ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
        System.out.println("Spring Container is ready");
        HelloWorld helloWorld = context.getBean(HelloWorld.class);
        System.out.println(helloWorld.sayHello());
        CustomerService customerService = context.getBean(CustomerService.class);
        System.out.println(customerService.findAll());

    }
}
.....................................................................................

What if your app grows, then bean creations in the Config is really hard, how to remove beans creation configuration?

.....................................................................................
			How to remove bean creations from the Java config
.....................................................................................
@Component-scan  == beans.xml <contex:component-scan base-package="com.ibm.spring"/>

Note: Please disable any code which is written to create beans automatically.

	
package com.ibm.spring.beans.config;

//This is class where we are going to create beans: java config
//AppConfig.java == beans.xml

import com.ibm.spring.beans.CustomerService;
import com.ibm.spring.beans.HelloWorld;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;

//<beans>
//@Configuration
//@Import({HelloConfig.class, CustomerConfig.class})
@ComponentScan(basePackages = "com.ibm.spring")
public class AppConfig {
    //write logic to create bean
    //<bean/>
}
//</beans>
....................................................................................
			Dependency injection and java config
...................................................................................
package com.ibm.spring.beans;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class Customer {
    private int id;
    private String name;
    @Autowired
    private Address address;

    public Customer() {
    }

    public Customer(int id, String name, Address address) {
        this.id = id;
        this.name = name;
        this.address = address;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Address getAddress() {
        return address;
    }

    public void setAddress(Address address) {
        this.address = address;
    }

    @Override
    public String toString() {
        return "Customer{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", address=" + address +
                '}';
    }
}
package com.ibm.spring.beans;

import org.springframework.stereotype.Component;

@Component
public class Address {
    private String city;

    public Address() {
    }

    @Override
    public String toString() {
        return "Address{" +
                "city='" + city + '\'' +
                '}';
    }

    public Address(String city) {
        this.city = city;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }
}
package com.ibm.spring;

import com.ibm.spring.beans.Address;
import com.ibm.spring.beans.Customer;
import com.ibm.spring.beans.CustomerService;
import com.ibm.spring.beans.HelloWorld;
import com.ibm.spring.beans.config.AppConfig;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class DependencyInjection {
    public static void main(String[] args) {
        ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
        System.out.println("Spring Container is ready");
        Customer customer = context.getBean(Customer.class);
        customer.setId(1);
        customer.setName("Subramanain");
        customer.setAddress(new Address("Coimbatore"));
        System.out.println(customer);


    }
}
.....................................................................................
			  Auto Configuration
.....................................................................................
Spring allows us  automatically configure your spring application based on bean definitions in the class path.

How to opt-in auto configuration?

@EnableAutoConfiguration or @SpringBootApplication

.....................................................................................
					Auto Configuration
				 Getting Spring Boot Architecture
.....................................................................................

What is Spring Boot?

Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can "just run".

We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need minimal Spring configuration.

Spring Boot Focus Mainly Configuration

1.Build Configuration - lib configuration -pom.xml
2.Application Configuration.

Use case : i want to create WebApp using Spring- SpringMVC

Architecture:

WEB  +DATABASE CONNECTion using Mysql

Use case : i want to create WebApp using Spring- SpringMVC

Architecture:

WEB  +DATABASE CONNECTion using Mysql

Steps:

1.you have to create maven project

2.you need to add spring dependencies
   Spring-context
   Spring-web
   Spring-mvc
   mysql-connector-java
   commons-dbcp
   spring-orm
   hibernate-entitymanager
   jsr-250-api
 etc.........

3.App configuration
  src
   -main
      webapp
       -web-inf
       views
4.beans.xml / java config
   config
      WebListener COnfiguration
       -Change Spring container from plain to web
      WebAppConfig
        ViewResolver
  DataSourceConfig
  JPAConfig
.....................................................................................
........................................................................................................
					Why Spring Boot?

Spring Boot 
   starters reduces build dependency - POM Dependencies/project dependencies
   AutoConfigrator reduces the AppDepedency

1.Create stand-alone Spring applications
   You can deploy apps in containers,cloud.....easily

2.Embeded Tomcat, Jetty or Undertow directly (no need to deploy WAR files)
   SPring boots provides execuatble jar / fat jar /uber jar.	

3.Provide opinionated 'starter' dependencies to simplify your build configuration
     Looks like profie based configuration which is applied even for pom dependencies

4.Automatically configure Spring and 3rd party libraries whenever possible
    Via autoconfiguration and class path scanning.

Provide production-ready features such as metrics, health checks, and externalized configuration

How to begin with spring boot application?

YOu can create standalone spring boot app 
YOu can create web spring boot app

if you want to create spring boot project, https://start.spring.io/


pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.0</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.ibm</groupId>
	<artifactId>myspringboot</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>myspringboot</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>

Main
package com.ibm;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class MyspringbootApplication {

	public static void main(String[] args) {
		SpringApplication.run(MyspringbootApplication.class, args);
	}

}
....................................................................................

E:\session\IBM\2023\Dec\myspringboot> mvnw dependency:tree
[INFO] com.ibm:myspringboot:jar:0.0.1-SNAPSHOT
[INFO] +- org.springframework.boot:spring-boot-starter-web:jar:3.2.0:compile
[INFO] |  +- org.springframework.boot:spring-boot-starter:jar:3.2.0:compile 
[INFO] |  |  +- org.springframework.boot:spring-boot:jar:3.2.0:compile      
[INFO] |  |  +- org.springframework.boot:spring-boot-autoconfigure:jar:3.2.0:compile
[INFO] |  |  +- org.springframework.boot:spring-boot-starter-logging:jar:3.2.0:compile
[INFO] |  |  |  +- ch.qos.logback:logback-classic:jar:1.4.11:compile
[INFO] |  |  |  |  \- ch.qos.logback:logback-core:jar:1.4.11:compile
[INFO] |  |  |  +- org.apache.logging.log4j:log4j-to-slf4j:jar:2.21.1:compile
[INFO] |  |  |  |  \- org.apache.logging.log4j:log4j-api:jar:2.21.1:compile
[INFO] |  |  |  \- org.slf4j:jul-to-slf4j:jar:2.0.9:compile
[INFO] |  |  +- jakarta.annotation:jakarta.annotation-api:jar:2.1.1:compile
[INFO] |  |  \- org.yaml:snakeyaml:jar:2.2:compile
[INFO] |  +- org.springframework.boot:spring-boot-starter-json:jar:3.2.0:compile
[INFO] |  |  +- com.fasterxml.jackson.core:jackson-databind:jar:2.15.3:compile
[INFO] |  |  |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.15.3:compile
[INFO] |  |  |  \- com.fasterxml.jackson.core:jackson-core:jar:2.15.3:compile
[INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:jar:2.15.3:compile
[INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:jar:2.15.3:compile
[INFO] |  |  \- com.fasterxml.jackson.module:jackson-module-parameter-names:jar:2.15.3:compile
[INFO] |  +- org.springframework.boot:spring-boot-starter-tomcat:jar:3.2.0:compile
[INFO] |  |  +- org.apache.tomcat.embed:tomcat-embed-core:jar:10.1.16:compile
[INFO] |  |  +- org.apache.tomcat.embed:tomcat-embed-el:jar:10.1.16:compile
[INFO] |  |  \- org.apache.tomcat.embed:tomcat-embed-websocket:jar:10.1.16:compile
[INFO] |  +- org.springframework:spring-web:jar:6.1.1:compile
[INFO] |  |  +- org.springframework:spring-beans:jar:6.1.1:compile
[INFO] |  |  \- io.micrometer:micrometer-observation:jar:1.12.0:compile
[INFO] |  |     \- io.micrometer:micrometer-commons:jar:1.12.0:compile
[INFO] |  \- org.springframework:spring-webmvc:jar:6.1.1:compile
[INFO] |     +- org.springframework:spring-aop:jar:6.1.1:compile
[INFO] |     +- org.springframework:spring-context:jar:6.1.1:compile
[INFO] |     \- org.springframework:spring-expression:jar:6.1.1:compile
[INFO] \- org.springframework.boot:spring-boot-starter-test:jar:3.2.0:test
[INFO]    +- org.springframework.boot:spring-boot-test:jar:3.2.0:test
[INFO]    +- org.springframework.boot:spring-boot-test-autoconfigure:jar:3.2.0:test
[INFO]    +- com.jayway.jsonpath:json-path:jar:2.8.0:test
[INFO]    |  \- org.slf4j:slf4j-api:jar:2.0.9:compile
[INFO]    +- jakarta.xml.bind:jakarta.xml.bind-api:jar:4.0.1:test
[INFO]    |  \- jakarta.activation:jakarta.activation-api:jar:2.1.2:test
[INFO]    +- net.minidev:json-smart:jar:2.5.0:test
[INFO]    |  \- net.minidev:accessors-smart:jar:2.5.0:test
[INFO]    |     \- org.ow2.asm:asm:jar:9.3:test
[INFO]    +- org.assertj:assertj-core:jar:3.24.2:test
[INFO]    |  \- net.bytebuddy:byte-buddy:jar:1.14.10:test
[INFO]    +- org.awaitility:awaitility:jar:4.2.0:test
[INFO]    +- org.hamcrest:hamcrest:jar:2.2:test
[INFO]    +- org.junit.jupiter:junit-jupiter:jar:5.10.1:test
[INFO]    |  +- org.junit.jupiter:junit-jupiter-api:jar:5.10.1:test
[INFO]    |  |  +- org.opentest4j:opentest4j:jar:1.3.0:test
[INFO]    |  |  +- org.junit.platform:junit-platform-commons:jar:1.10.1:test
[INFO]    |  |  \- org.apiguardian:apiguardian-api:jar:1.1.2:test
[INFO]    |  +- org.junit.jupiter:junit-jupiter-params:jar:5.10.1:test
[INFO]    |  \- org.junit.jupiter:junit-jupiter-engine:jar:5.10.1:test
[INFO]    |     \- org.junit.platform:junit-platform-engine:jar:1.10.1:test
[INFO]    +- org.mockito:mockito-core:jar:5.7.0:test
[INFO]    |  +- net.bytebuddy:byte-buddy-agent:jar:1.14.10:test
[INFO]    |  \- org.objenesis:objenesis:jar:3.3:test
[INFO]    +- org.mockito:mockito-junit-jupiter:jar:5.7.0:test
[INFO]    +- org.skyscreamer:jsonassert:jar:1.5.1:test
[INFO]    |  \- com.vaadin.external.google:android-json:jar:0.0.20131108.vaadin1:test
[INFO]    +- org.springframework:spring-core:jar:6.1.1:compile
[INFO]    |  \- org.springframework:spring-jcl:jar:6.1.1:compile
[INFO]    +- org.springframework:spring-test:jar:6.1.1:test
[INFO]    \- org.xmlunit:xmlunit-core:jar:2.9.1:test


Here one pom dependency will bring all dependant libs.

AutoConfiguration:
..................

Configuration is based on config meta data provied in "META-INF/spring.factories"

org.springframework.boot.spring-autoconfigure.2.5.3

spring.factories 
  It is meta configuration file read by spring container to create objects/beans based on certain conditions -rules


Spring container scans spring.factories file , starts loading configuration, which apples @condtional 

annotations.

  Container------|AppConfig----|spring.factories----starts initalizing beans/configurations/components   based on rules(conditions) => Spring Boot.


spring-configuration-meta.json

 This file contains default "Properties and values" - application.properties file default value
 eg
 {
      "name": "spring.redis",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties"
    },
    {
      "name": "spring.redis.cluster",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Cluster",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "sourceMethod": "getCluster()"
    },
  
This file is loaded during boot process

additional-spring-configuration-metadata.json

  {
      "name": "server.port",
      "defaultValue": 8080
    }

Annotations are processed by ASM - java bytecode engineering lib.
https://asm.ow2.io/

.....................................................................................
			Conditional Bean Creations
.....................................................................................

   When building a spring boot app, we sometimes want to only load beans or modules(configurations) into the application context(container) if some conditions met, Be it disable some beans during tests, or react to a certain property in the runtime env.

Spring has annotation Called @Conditional annotation.

This annotation allows us custom conditions to apply to parts of application context.

Why Conditional Beans?

   A spring application context contains an object graph that makes up all the beans that our application needs at runtime.
@Conditional annotation allows us to define conditions under which a certain bean is included into that object graph.

eg:

 Some beans work in test env, the same bean i dont want in production env.
 enable or disable some certain cross cutting concerns.
  eg:
    we have built a module that configures security, during dev test, we dont want to have username and passwords every time. so i want to disable the whole security module in local tests.
 
 if some external resources is available without which they cant work. 
   for eg: my application should not work if there is no logback.xml file has been found on classpath.

- if beans does not exits  / exits
- if module does not exits / exits
- if external does not exits  / exits

Declaring Conditional Bean:
..........................
In application, you can declare bean any where, optionaly we can add condition.

only if this condition is satisifed will the bean added to the application context

eg:

@Configuration
class MyBeanConfig {

 @Conditional(...)
 @Bean
 public MyBean  getBean(){ 
       return new MyBean()
 }

}


Module Level

@Configuration
@Conditional(...)
class MyBeanConfig {

 @Bean
 public MyBean  getBean(){ 
       return new MyBean()
 }

}

Component Level

@Component
@Conditional(...)
class MyComponent {

 
}
........................................................................................................

PreDefined Conditions:
......................
1.ConditionalOnProperty 
   Loads beans based on env property - application.properties
2.ConditionalOnExpression
3.ConditionalOnBean
4.ConditionalOnMissingBean
5.ConditionalOnResource
6.ConditionalOnClass
7.ConditionalOnJava -  version based

etc..
custom conditions
Boolean Operators
Or
And


ConditionalBean:

-OnBean - The bean if  threre , what should i do

if Mysql dependency (driver jar) in the build path
     -Create Datasource Object
           -Add properties - connection string - url,password,userName


-OnMissing -Then bean if not there ,what should i do
  if web missing, then start console container

package com.ibm.config;

import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class DependantBeanConfig {

    @Bean
    OptionalBean optionalBean() {
        return new OptionalBean();
    }

    @Bean
    @ConditionalOnBean(OptionalBean.class)
        //create this bean only if OptionalBean is available , if not dont
    DependantBean dependantBean() {
        return new DependantBean();
    }

    static class DependantBean {
        public DependantBean() {
            System.out.println("DependantBean is ready");
        }
    }

    //Inner class which represents bean
    static class OptionalBean {
        public OptionalBean() {
            System.out.println("OptionalBean is ready");
        }
    }
}
@ConditionalOnClass and @ConditionalOnMissingClass



package com.valtech.bootapp.conditionalonclass;

public class RequiredClass {
}
package com.valtech.bootapp.conditionalonclass;

import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
//@ConditionalOnClass(name = "com.valtech.bootapp.conditionalonclass.RequiredClass2")
public class SpringConfig {

    @Bean
    //@ConditionalOnClass(value = RequiredClass.class)
//    @ConditionalOnClass(name = "com.valtech.bootapp.conditionalonclass.RequiredClass")
    public MyClass getMyClass() {
        return new MyClass();
    }
    @Bean
    //@ConditionalOnClass(value = RequiredClass.class)
//    @ConditionalOnMissingClass("com.valtech.bootapp.conditionalonclass.RequiredClass1")
    public MyClass getMyClassMissing() {
        return new MyClass("Missing Class");
    }

    public static class MyClass {

        public MyClass(String message) {
            System.out.println(message);
        }

        public MyClass() {
            System.out.println("MyClass");
        }
    }
}


Conditional Componnent:

@Component
@ConditionalXXX
public class MyComponent{}

@ConditionalOnProperty("value.endabled",havingValue="true",matchIfMissing=true)
@Configuration
public class CrossCuttingModule{

}
......................................................................................			@SpringBootApplication
.....................................................................................

@SpringBootConfiguration
@EnableAutoConfiguration
@ComponentScan
@SpringBootApplication

package com.ibm;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.SpringBootConfiguration;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.ComponentScan;

@SpringBootApplication
//@SpringBootConfiguration
//@EnableAutoConfiguration
//@ComponentScan
public class MyspringbootApplication {

	public static void main(String[] args) {
		SpringApplication.run(MyspringbootApplication.class, args);
	}

}
Configuration   ------> Bean Creations - <bean>
@@SpringBootConfiguration

@EnableAutoConfiguration

 -Tells Spring boot to guess how you  want to configure spring,based on the jar dependencies that you have addeded

-IT auto configures the beans that are present in the class path.

 This simplifies the developer work by guuessing the required beans from the class path and configures to run the application.

-for eg, H2 is on your class path, you have not manually configured any database connection beans, then spring will auto configure an in memory database.


@ComponentScan
 Tells spring to look for other components,configurations and all services in the specificied package.
Spring is able to auto scan,detect  and register your beans or components from predefined project package.
if no package is specified current class package is taken as the root package.
.......................................................................................................



Beans and Spring Boot:


package com.ibm.beans;

import org.springframework.stereotype.Component;

@Component
public class HelloWorld {

    public String sayHello() {
        return "Hello";
    }
}

package com.ibm;

import com.ibm.beans.HelloWorld;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.SpringBootConfiguration;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.annotation.ComponentScan;

@SpringBootApplication
//@SpringBootConfiguration
//@EnableAutoConfiguration
//@ComponentScan
public class MyspringbootApplication {

    public static void main(String[] args) {
        ConfigurableApplicationContext context = SpringApplication.run(MyspringbootApplication.class, args);
        HelloWorld helloWorld = context.getBean(HelloWorld.class);
        System.out.println(helloWorld.sayHello());
    }

}


Spring Boot App bootstrap from java main method


SpringApplication.run(BootappApplication.class, args);

When you run this.

You will get

1.It creates ApplicationContext object -Spring Container

2.Register CommandLinePropertyResource

3.Refersh ApplicationContext

4.Trigger any CommandLineRunner Bean
.....................................................................................
Spring boot Application type:

1.Spring Pojo Style App -command Line - Core Spring App

2.Web Application - Servlet Based - Tomcat

3.Reactive Web Apps - Reactive Extensions-Project Reactor- Netty


Which application is default App?

Based on starter Dependency.
spring-boot-starter   ---- Spring Pojo Style app

CLI 
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

Web
	<dependency>
        			<groupId>org.springframework.boot</groupId>
        			<artifactId>spring-boot-starter-web</artifactId>
        		</dependency>

Reactive web: non blocking- webflux:
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>
.....................................................................................
			 Web Service Development
....................................................................................

What is WebService?
    WebService is a program , distributed program , deployed on Server called web container, returns data to the users in the form of document called "XML OR json or any format which user is interested"
    WebService is just type of web application.

.....................................................................................
			   RestFull Web Service.
.....................................................................................

REST  Stands for - Representational State Transfer.

Representational - Format / Data Format

State - Data

Transfer -Moving data 

   "Moving/Transfering state from the server to clients using different formats like    xml,json,pdf,word,image...."

API:
  Application programming interface.
  API means "method/function" which encapsulate biz logic eg save,update,delete.
  APIs are organized into "classes" in object oriented programming


package com.ibm;

import org.springframework.stereotype.Service;

@Service
public class ProductService {

    public String findAll() {
        return "Products";
    }

    public String save() {
        return "Save";
    }

    public String update() {
        return "update";
    }
}


How to invoke api?
      ProductService productService=context.getBean(ProductService.class);
        //invoke api
        System.out.println(productService.findAll());
        System.out.println(productService.save());
        System.out.println(productService.update());

We are calling api within same process(jvm).

What if theses apis need to be called from other machine/other process?

  If apis are called via networks, we need some kind of rules to invoke apis..
  Rules are nothing "Protocal".

Web is based on HTTP protocal.
We can call apis through "HTTP" Protocal".

HTTP protocal is just C program only.

HTTP C program can be classified into two category

1.Client program
   HTTP client programs talks to server program via http protocal
2.Server program
   HTTP Server programs receives the req from the client program acts accrodingly.
................

Since HTTP c program.
Any program has two things
1.variables
2.methods/functions

variables are called "headers"
methods are called "HTTP verbs" - GET,POST,DELETE,PUT,...TRACE,DEBUG....

API design and http protocal:

 Client------GET -----------------------------Server---runs GET---|mapping with api

URI: 
 It is addressing scheme to identify the "RESOURCES/API" in the server, maps accordingly...

REST Spec:
https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm
....................................................................................




	