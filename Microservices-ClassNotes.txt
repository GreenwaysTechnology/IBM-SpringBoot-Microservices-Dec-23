

Data Per service Pattern

Each service has its own database

Drawback:

 Transactions across service is complex
   updating or inserting multiple tables across multiple datbase

for eg:
 order table and customer table

Query data across multiple

Join data across multiple tables

......................

Transactions:
 Implementing transactions that span services - use the Saga pattern.

Query:
  CQRS,API Composition


Problem-Microservice-BC->Database-Dperservice- saga and CQRS

Services are communicated by sending message(events) to other services -saga

in order to send message and receives
we have to pattern
1.Choreography
2.Orchestration

How to send and receive messages(events)?

  Event sourcing /Domain Event (DDD)
..............................................................................

rep.save(order)-----------------> insert into ordertable
broker.send(order)-------------------->insert into message broker(Apache 				     Kafka)/RabitMQ/google PUb/sub

Event driven microservices--->Eventsourcing - core pattern| 
...................................................................................
				Microserivces implementation
...............................................................................




		Spring cloud

			|

			 restap,db,integration etc.....
				|
			    Spring Boot
				|
			   SPRING FRAMEWORK - xml,java config
				JEE

....................................................................................

Event sourcing with database,kafka,eventstoredb,google pub/sub ,eventuate tram


Solutions:
Event sourcing with database

There are only tables
2.EventStore- table which stores "sequence of biz transactions"

database h2.

Event - something is happing /happend
 Mail has arrvied
 I am typing 
 Create Order - event
 Update Inventory
 Create User
 Update User
 Delete product
 
Now we need to store every event(what is happening) in the system.

in order to store event, we need to reprent event.

In kafka like system events are represented by a structure called "Record".

In our example event is represented as "java Object"-

StockAddedEvent - {name,quantity,user} ===> store db or into kafka
StockRemovedEvent-{name,quantity,user} ===> store db or into kafka

Event sourcing with kafka using Kafka Templates:
................................................

1.you need database - h2
2.You need kafka -using docker
3.spring boot project - add kafka,configuration,write events,update tables.
.....................................................................................
			 Kafka
.....................................................................................

kafka and spring 

1.spring-kafka -  using KafkaTemplate
2.spring-cloud-stream- advanced kafka integration
....................................................................................

Data Management:

1.Shared Database

2.Database Per service Pattern


Database Arch:

1.services are isloated
2.Services need to update database tables based on other services
3.Services need to query and join data across from different services
4.services may use different databases like mongo or mysql

Solution:
 1.You can use single database
    Shared database

Advantages:
1.single database - so transactions are very very use.

BEGIN TRANSACTION
…
SELECT ORDER_TOTAL
 FROM ORDERS WHERE CUSTOMER_ID = ?
…
SELECT CREDIT_LIMIT
FROM CUSTOMERS WHERE CUSTOMER_ID = ?
…
INSERT INTO ORDERS …
…
COMMIT TRANSACTION

2.Easy administration and Maintance.

drawbacks:
 Tight coupling
   during development
   during runtime.

...................................................................................
.Database Per service Pattern

Keep database for every service.

Advantages:
Helps ensure that the services are loosely coupled. Changes to one service’s database does not impact any other services.

Each service can use the type of database that is best suited to its needs. For example, a service that does text searches could use ElasticSearch. A service that manipulates a social graph could use Neo4j.

Drawbacks:
1.transactions are really challange

2.Query handling is also complicated

3.Multiple different database communication so hard

Transactions:
  INSERT,UPDATE,DELETE
Query:
  SELECT,JOIN

There are various patterns/solutions for implementing transactions and queries that span services:

Transactions: SAGA
Queries : CQRS,APICOMPOSTION

Database
   |
   DatabasePerService
	 |
         SAGA - Transactions
         CQRS/APICOMPOSTION - QUERY,JOIN
.....................................................................................
SAGA:
You have applied the Database per Service pattern. Each service has its own database. Some business transactions, however, span multiple service so you need a mechanism to implement transactions that span services.

How to implement transactions that span services?

-2PC - 2phase commit - It is not usefull in microservices- not recommend.

A saga is a sequence of local transactions.

In each biz transactions which updates local databases, when ever a database is updated , we need to publish "event" using event sourcing pattern - saga.
Each services are going to communicate over events via message brokers.

SAGA implementation:
 It involes two things

=>Updating local database with transactions
=>Sending and receiving message(event)

Cordination of saga:

1.Choreography - each local transaction publishes domain events that trigger local transactions in other services

2.Orchestration - an orchestrator (object) tells the participants what local transactions to execute

Choreography vs Orhestration:

Choregograph "transactions" are handled by "either service or controller" directly
that means you have to write code to publish messages and listen message.


Orchestration "transactions" are isloated from the biz logic/code , There is orchestrator who is responsible for publishing and listening message..

In realtime, orchestrator could be a separate java code or it could be a tool.
.....................................................................................

Implementation:

Program:
=>H2 Database.
=>spring-Data-jpa
=>Spring-cloud-stream,spring-kafka,spring-cloud-stream-kafka-binder
=>Reactive Programming -WebFlux

Reactive Programming:
.....................
java:
RXJAVA- lib which implements reactive programming principles- observer designpatter,iterator design pattern,fp principles

Project Reactor:
  From Spring team.

Muntiny
  From Red hat.

SPring created reactive extension on spring framework using another abstraction called spring-web flux

			  
			Project Reactor
			  |
	
			 WebFlux
			   |
  		       Spring Boot


Types of web apps in spring boot:
1.Blocking web - tomcat
2.Reactive web - netty


According to reactive programming there are two objects

1.Publisher - which is object who publishes events(data,error,complete)
2.Consumer/Subscriber- which is object who listens for events.


Project Reactor(WebFlux) Publisher Type:
...............................

1.Flux
   Can publish 0 to n events
2.Mono
  can publish single event.


Flux.just("Hello") - emit data event with data called "Hello".

Mono.just("Hello") -  emit data event with data called "Hello"

Flux can emit more values,where as Mono can emit only one value

Flux.just(1,2,3,4,5...)
Mono.just(10)

In Spring webflux , Rest api return types:

Return Value:Reponse Types
1.String
2.Object - Plain Domain Object or Collection like List or Set or Array
3.ResponseEntity
4.void
5.Reactive Type - Flux or Mono

Implementation:
...............

DTO - Data Transfer Object -Plain java class having setters and getters

OrderService can publish event via orderSuppler bean with orderSupplier-out-0 channel to the topic of "order-event".

OrderService can listen event via paymentEventConsumer bean with paymentEventConsumer-in-0 channel  from the topic of "payment-event".

 =>Order Service receive payment information via payment-event
 =>Once the payment is received , based on that it can take decision that order should be "Conformed" or "Recevied"


Flow for events from payment and inventory:
 Order-Service
	|
	->Receive Payment Event
			|
		Payment Event Handler
			|
		    updateOrder------>update order table with status of "CANCELLED" OR "Conformed"


 Order-Service
	|
	->Receive Inventory Event
			|
		Inventory Event Handler
			|
updateOrder------>update order table with status of "CANCELLED" OR "Conformed"


Flow:
 Order Place

POST /orders/create  { }
	|
	OrderController
		|
		OrderCommandService
			|
			OrderCreate
			   ->Save Order into Table
			   ->Publish OrderEvent into order-event Topic

...................................................................................
Payment Service :

=>It is not web app
=>It is back end application
=>This app is communicated via only messages/events.


Flow:
   Listening for order-event.
	|
	Order event is available
		|
		process Payment
			|
			Whether Balance is available or not
			|
		     if Balance is available, update the balance table and publish 
payment event.
		     if balance is not availble update ,publish payment event


Inventory-event:

=>It is not web app
=>It is back end application
=>This app is communicated via only messages/events.


Flow:
   Listening for order-event.
	|
	Order event is available
		|
		process inventory
			|
			Whether qty is available or not
			|
		     if qty is available, update the balance table and publish 
inventory event.
		     if qty is not availble update ,publish inventory event
...................................................................................
			   Orchestration
...................................................................................

Orchestrator is can be java program or a tool from third party or as part of cloud..

.....................................................................................
			   CQRS - Pattern
.....................................................................................

You have Microservice Architecture
		|
	   Data Per Service
		|
         Event Sourcing Pattern
		|
   How to Query data from multiple tables across services


Solution : 
  CQRS Pattern

Define a separate database which has only readonly view.
....................................................................................
			Service Communications
....................................................................................

RPI :
  REST To Rest Communications.

api style: coding style
1.RestTemplate
2.RestClient - spring 6.x
3.Webclient
4.HTTP Interface - spring 6.x
5.OpenFignClient - Third party lib
....................................................................................

Service communications via client side discovery using "Eurka server".


1.Hello-Service
2.Any Rest client Service(restTemplate,webclient etc...)
3.Service Registry- Eurka

















