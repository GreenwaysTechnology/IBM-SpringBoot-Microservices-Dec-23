

Data Per service Pattern

Each service has its own database

Drawback:

 Transactions across service is complex
   updating or inserting multiple tables across multiple datbase

for eg:
 order table and customer table

Query data across multiple

Join data across multiple tables

......................

Transactions:
 Implementing transactions that span services - use the Saga pattern.

Query:
  CQRS,API Composition


Problem-Microservice-BC->Database-Dperservice- saga and CQRS

Services are communicated by sending message(events) to other services -saga

in order to send message and receives
we have to pattern
1.Choreography
2.Orchestration

How to send and receive messages(events)?

  Event sourcing /Domain Event (DDD)
..............................................................................

rep.save(order)-----------------> insert into ordertable
broker.send(order)-------------------->insert into message broker(Apache 				     Kafka)/RabitMQ/google PUb/sub

Event driven microservices--->Eventsourcing - core pattern| 
...................................................................................
				Microserivces implementation
...............................................................................




		Spring cloud

			|

			 restap,db,integration etc.....
				|
			    Spring Boot
				|
			   SPRING FRAMEWORK - xml,java config
				JEE

....................................................................................

Event sourcing with database,kafka,eventstoredb,google pub/sub ,eventuate tram


Solutions:
Event sourcing with database

There are only tables
2.EventStore- table which stores "sequence of biz transactions"

database h2.

Event - something is happing /happend
 Mail has arrvied
 I am typing 
 Create Order - event
 Update Inventory
 Create User
 Update User
 Delete product
 
Now we need to store every event(what is happening) in the system.

in order to store event, we need to reprent event.

In kafka like system events are represented by a structure called "Record".

In our example event is represented as "java Object"-

StockAddedEvent - {name,quantity,user} ===> store db or into kafka
StockRemovedEvent-{name,quantity,user} ===> store db or into kafka

Event sourcing with kafka using Kafka Templates:
................................................

1.you need database - h2
2.You need kafka -using docker
3.spring boot project - add kafka,configuration,write events,update tables.




















